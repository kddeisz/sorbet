class <emptyTree><<C <root>>> < (::<todo sym>)
  def bar<<todo method>>(a, &<blk>)
    a
  end

  class <emptyTree>::<C Splatable><<C <todo sym>>> < (::<todo sym>)
    def to_a<<todo method>>(&<blk>)
      [1]
    end
  end

  class <emptyTree>::<C Rescueable><<C <todo sym>>> < (::<todo sym>)
    def to_a<<todo method>>(&<blk>)
      [<emptyTree>::<C String>, <emptyTree>::<C RuntimeError>]
    end
  end

  class <emptyTree>::<C Parent><<C <todo sym>>> < (::<todo sym>)
    def foo<<todo method>>(a, b, &<blk>)
      [b, a]
    end
  end

  class <emptyTree>::<C Child><<C <todo sym>>> < (<emptyTree>::<C Parent>)
    def foo<<todo method>>(&<blk>)
      begin
        a = [1, 2]
        ::<Magic>.<call-with-splat>(<self>, :super, a.to_a(), nil)
      end
    end
  end

  def foo<<todo method>>(&<blk>)
    begin
      a = [1]
      a.to_a().concat([2])
      [1].concat(a.to_a())
      [1].concat(a.to_a()).concat([2])
      ::<Magic>.<call-with-splat>(<self>, :bar, a.to_a(), nil)
      ::<Magic>.<call-with-splat>(<self>, :bar, <emptyTree>::<C Splatable>.new().to_a(), nil)
      <emptyTree>::<C Child>.new().foo()
      b = <emptyTree>::<C Splatable>.new().to_a()
      begin
        <assignTemp>$2 = 1
        if ::<Magic>.<check-match-array>(<assignTemp>$2, ::<Magic>.<splat>(<emptyTree>::<C Integer>))
          <emptyTree>
        else
          <emptyTree>
        end
      end
      <self>.raise("a")
    rescue <emptyTree>::<C Rescueable>.new().to_a() => <rescueTemp>$3
      <emptyTree>
      <self>.raise("a")
    rescue [<emptyTree>::<C Array>].concat(<emptyTree>::<C Rescueable>.new().to_a()).concat([<emptyTree>::<C Float>]) => <rescueTemp>$4
      <emptyTree>
    end
  end

  <self>.foo()
end
