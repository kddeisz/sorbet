digraph "for.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$8: T.class_of(A) = alias <C A>\l<statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(A))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$13: T.class_of(A) = alias <C A>\l<statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(A))\l<cfgAlias>$17: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$19: T.class_of(E) = alias <C E>\l<statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$19: T.class_of(E))\l<cfgAlias>$22: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$24: T.class_of(E) = alias <C E>\l<statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$24: T.class_of(E))\l<cfgAlias>$28: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$30: T.class_of(Main) = alias <C Main>\l<statTemp>$26: Sorbet::Private::Static::Void = <cfgAlias>$28: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$30: T.class_of(Main))\l<cfgAlias>$33: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$35: T.class_of(Main) = alias <C Main>\l<statTemp>$31: Sorbet::Private::Static::Void = <cfgAlias>$33: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$35: T.class_of(Main))\l<cfgAlias>$38: T.class_of(Main) = alias <C Main>\l<statTemp>$36: T.untyped = <cfgAlias>$38: T.class_of(Main).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#each" {
    label = "::<Class:A>#each";
    color = blue;
    "bb::<Class:A>#each_0" [shape = invhouse];
    "bb::<Class:A>#each_1" [shape = parallelogram];

    "bb::<Class:A>#each_0" [
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U A>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<blk>: T.untyped = load_arg(<blk>)\l<statTemp>$5: Integer(1) = 1\l<statTemp>$6: Integer(2) = 2\l<statTemp>$7: Integer(3) = 3\l<statTemp>$8: Integer(4) = 4\l<statTemp>$9: Integer(5) = 5\l<statTemp>$3: T.untyped = <blk>: T.untyped.call(<statTemp>$5: Integer(1), <statTemp>$6: Integer(2), <statTemp>$7: Integer(3), <statTemp>$8: Integer(4), <statTemp>$9: Integer(5))\l<statTemp>$11: Integer(6) = 6\l<statTemp>$12: Integer(7) = 7\l<statTemp>$13: Integer(8) = 8\l<statTemp>$14: Integer(9) = 9\l<statTemp>$15: Integer(0) = 0\l<returnMethodTemp>$2: T.untyped = <blk>: T.untyped.call(<statTemp>$11: Integer(6), <statTemp>$12: Integer(7), <statTemp>$13: Integer(8), <statTemp>$14: Integer(9), <statTemp>$15: Integer(0))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_0" -> "bb::<Class:A>#each_1" [style="bold"];
    "bb::<Class:A>#each_1" [
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_1" -> "bb::<Class:A>#each_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#<static-init>" {
    label = "::<Class:A>#<static-init>";
    color = blue;
    "bb::<Class:A>#<static-init>_0" [shape = invhouse];
    "bb::<Class:A>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:A>#<static-init>_0" [
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U A>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:each) = :each\l<statTemp>$7: Symbol(:normal) = :normal\l<returnMethodTemp>$2: Symbol(:each) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(A), <statTemp>$6: Symbol(:each), <statTemp>$7: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:each)\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_0" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
    "bb::<Class:A>#<static-init>_1" [
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_1" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e=" {
    label = "::<Class:E>#e=";
    color = blue;
    "bb::<Class:E>#e=_0" [shape = invhouse];
    "bb::<Class:E>#e=_1" [shape = parallelogram];

    "bb::<Class:E>#e=_0" [
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l@e$3: T.untyped = alias <C <undeclared-field-stub>> (@e)\l<self>: T.class_of(E) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U E>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U E>> $1><C <U <AttachedClass>>>)\l  ]\l});\le: T.untyped = load_arg(e)\l@e$3: T.untyped = e\l<returnMethodTemp>$2: T.untyped = @e$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_0" -> "bb::<Class:E>#e=_1" [style="bold"];
    "bb::<Class:E>#e=_1" [
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_1" -> "bb::<Class:E>#e=_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e" {
    label = "::<Class:E>#e";
    color = blue;
    "bb::<Class:E>#e_0" [shape = invhouse];
    "bb::<Class:E>#e_1" [shape = parallelogram];

    "bb::<Class:E>#e_0" [
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l@e$3: T.untyped = alias <C <undeclared-field-stub>> (@e)\l<self>: T.class_of(E) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U E>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U E>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<returnMethodTemp>$2: T.untyped = @e$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_0" -> "bb::<Class:E>#e_1" [style="bold"];
    "bb::<Class:E>#e_1" [
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_1" -> "bb::<Class:E>#e_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#<static-init>" {
    label = "::<Class:E>#<static-init>";
    color = blue;
    "bb::<Class:E>#<static-init>_0" [shape = invhouse];
    "bb::<Class:E>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:E>#<static-init>_0" [
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(E) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U E>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U E>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:e=) = :e=\l<statTemp>$8: Symbol(:normal) = :normal\l<statTemp>$3: Symbol(:e=) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(E), <statTemp>$7: Symbol(:e=), <statTemp>$8: Symbol(:normal))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: Symbol(:e) = :e\l<statTemp>$14: Symbol(:normal) = :normal\l<statTemp>$9: Symbol(:e) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(E), <statTemp>$13: Symbol(:e), <statTemp>$14: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:E>#<static-init>_0" -> "bb::<Class:E>#<static-init>_1" [style="bold"];
    "bb::<Class:E>#<static-init>_1" [
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#<static-init>_1" -> "bb::<Class:E>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#main" {
    label = "::<Class:Main>#main";
    color = blue;
    "bb::<Class:Main>#main_0" [shape = invhouse];
    "bb::<Class:Main>#main_1" [shape = parallelogram];

    "bb::<Class:Main>#main_0" [
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l@a$110: T.untyped = alias <C <undeclared-field-stub>> (@a)\l@@b$114: T.untyped = alias <C <undeclared-field-stub>> (@@b)\l$c$118: T.untyped = alias <C <undeclared-field-stub>> ($c)\l<self>: T.class_of(Main) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Main>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Main>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$6: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(A).each()\l<selfRestore>$7: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_0" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_1" [
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_1" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_2" [
        color = black;
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(Main), <block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_3" [style="tapered"];

    "bb::<Class:Main>#main_3" [
        color = black;
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\l<statTemp>$3: T.untyped = Solve<<block-pre-call-temp>$6, each>\l<self>: T.class_of(Main) = <selfRestore>$7\l<cfgAlias>$17: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$18: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(A).each()\l<selfRestore>$19: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_3" -> "bb::<Class:Main>#main_6" [style="bold"];
    "bb::<Class:Main>#main_5" [
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(Main), <block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$8: T.untyped = load_yield_params(each)\l<blk>$9: Integer(0) = 0\la$1: T.untyped = <blk>$8: T.untyped.[](<blk>$9: Integer(0))\l<statTemp>$12: T.untyped = a$1: T.untyped.inspect()\l<blockReturnTemp>$10: NilClass = <self>: T.class_of(Main).puts(<statTemp>$12: T.untyped)\l<blockReturnTemp>$14: T.noreturn = blockreturn<each> <blockReturnTemp>$10: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_6" [
        color = black;
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(Main), <block-pre-call-temp>$18: Sorbet::Private::Static::Void, <selfRestore>$19: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_9" [style="bold"];
    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_7" [style="tapered"];

    "bb::<Class:Main>#main_7" [
        color = black;
        label = "block[id=7, rubyBlockId=0](<block-pre-call-temp>$18: Sorbet::Private::Static::Void, <selfRestore>$19: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\l<statTemp>$15: T.untyped = Solve<<block-pre-call-temp>$18, each>\l<self>: T.class_of(Main) = <selfRestore>$19\l<cfgAlias>$43: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$44: Sorbet::Private::Static::Void = <cfgAlias>$43: T.class_of(A).each()\l<selfRestore>$45: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_7" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_9" [
        color = black;
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(Main), <block-pre-call-temp>$18: Sorbet::Private::Static::Void, <selfRestore>$19: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$20: T.untyped = load_yield_params(each)\lforTemp$2: T.untyped = <blk>$20\l<cfgAlias>$26: T.class_of(<Magic>) = alias <C <Magic>>\l<assignTemp>$2$2: T.untyped = <cfgAlias>$26: T.class_of(<Magic>).<splat>(forTemp$2: T.untyped)\l<cfgAlias>$30: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$32: Integer(1) = 1\l<statTemp>$33: Integer(0) = 0\l<assignTemp>$3$2: T.untyped = <cfgAlias>$30: T.class_of(<Magic>).<expand-splat>(<assignTemp>$2$2: T.untyped, <statTemp>$32: Integer(1), <statTemp>$33: Integer(0))\l<statTemp>$36: Integer(0) = 0\la$2: T.untyped = <assignTemp>$3$2: T.untyped.[](<statTemp>$36: Integer(0))\l<statTemp>$38: T.untyped = a$2: T.untyped.inspect()\l<blockReturnTemp>$22: NilClass = <self>: T.class_of(Main).puts(<statTemp>$38: T.untyped)\l<blockReturnTemp>$40: T.noreturn = blockreturn<each> <blockReturnTemp>$22: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_9" -> "bb::<Class:Main>#main_6" [style="bold"];
    "bb::<Class:Main>#main_10" [
        color = black;
        label = "block[id=10, rubyBlockId=3](<self>: T.class_of(Main), <block-pre-call-temp>$44: Sorbet::Private::Static::Void, <selfRestore>$45: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_13" [style="bold"];
    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_11" [style="tapered"];

    "bb::<Class:Main>#main_11" [
        color = black;
        label = "block[id=11, rubyBlockId=0](<block-pre-call-temp>$44: Sorbet::Private::Static::Void, <selfRestore>$45: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\l<statTemp>$41: T.untyped = Solve<<block-pre-call-temp>$44, each>\l<self>: T.class_of(Main) = <selfRestore>$45\l<cfgAlias>$59: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$60: Sorbet::Private::Static::Void = <cfgAlias>$59: T.class_of(A).each()\l<selfRestore>$61: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_13" [
        color = black;
        label = "block[id=13, rubyBlockId=3](<self>: T.class_of(Main), <block-pre-call-temp>$44: Sorbet::Private::Static::Void, <selfRestore>$45: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$46: T.untyped = load_yield_params(each)\l<blk>$47: Integer(0) = 0\la$3: T.untyped = <blk>$46: T.untyped.[](<blk>$47: Integer(0))\l<blk>$47: Integer(1) = 1\lb$3: T.untyped = <blk>$46: T.untyped.[](<blk>$47: Integer(1))\l<statTemp>$51: T.untyped = a$3: T.untyped.inspect()\l<statTemp>$49: NilClass = <self>: T.class_of(Main).puts(<statTemp>$51: T.untyped)\l<statTemp>$54: T.untyped = b$3: T.untyped.inspect()\l<blockReturnTemp>$48: NilClass = <self>: T.class_of(Main).puts(<statTemp>$54: T.untyped)\l<blockReturnTemp>$56: T.noreturn = blockreturn<each> <blockReturnTemp>$48: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_13" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_14" [
        color = black;
        label = "block[id=14, rubyBlockId=4](<self>: T.class_of(Main), <block-pre-call-temp>$60: Sorbet::Private::Static::Void, <selfRestore>$61: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_17" [style="bold"];
    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_15" [style="tapered"];

    "bb::<Class:Main>#main_15" [
        color = black;
        label = "block[id=15, rubyBlockId=0](<block-pre-call-temp>$60: Sorbet::Private::Static::Void, <selfRestore>$61: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\l<statTemp>$57: T.untyped = Solve<<block-pre-call-temp>$60, each>\l<self>: T.class_of(Main) = <selfRestore>$61\l<statTemp>$92: String(\"main\") = \"main\"\l<statTemp>$90: NilClass = <self>: T.class_of(Main).puts(<statTemp>$92: String(\"main\"))\l<cfgAlias>$95: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$96: Sorbet::Private::Static::Void = <cfgAlias>$95: T.class_of(A).each()\l<selfRestore>$97: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_15" -> "bb::<Class:Main>#main_18" [style="bold"];
    "bb::<Class:Main>#main_17" [
        color = black;
        label = "block[id=17, rubyBlockId=4](<self>: T.class_of(Main), <block-pre-call-temp>$60: Sorbet::Private::Static::Void, <selfRestore>$61: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$62: T.untyped = load_yield_params(each)\lforTemp$4: T.untyped = <blk>$62\l<cfgAlias>$68: T.class_of(<Magic>) = alias <C <Magic>>\l<assignTemp>$4$4: T.untyped = <cfgAlias>$68: T.class_of(<Magic>).<splat>(forTemp$4: T.untyped)\l<cfgAlias>$72: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$74: Integer(2) = 2\l<statTemp>$75: Integer(0) = 0\l<assignTemp>$5$4: T.untyped = <cfgAlias>$72: T.class_of(<Magic>).<expand-splat>(<assignTemp>$4$4: T.untyped, <statTemp>$74: Integer(2), <statTemp>$75: Integer(0))\l<statTemp>$78: Integer(0) = 0\la$4: T.untyped = <assignTemp>$5$4: T.untyped.[](<statTemp>$78: Integer(0))\l<statTemp>$81: Integer(1) = 1\lb$4: T.untyped = <assignTemp>$5$4: T.untyped.[](<statTemp>$81: Integer(1))\l<statTemp>$84: T.untyped = a$4: T.untyped.inspect()\l<statTemp>$82: NilClass = <self>: T.class_of(Main).puts(<statTemp>$84: T.untyped)\l<statTemp>$87: T.untyped = b$4: T.untyped.inspect()\l<blockReturnTemp>$64: NilClass = <self>: T.class_of(Main).puts(<statTemp>$87: T.untyped)\l<blockReturnTemp>$89: T.noreturn = blockreturn<each> <blockReturnTemp>$64: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_18" [
        color = black;
        label = "block[id=18, rubyBlockId=5](<self>: T.class_of(Main), <block-pre-call-temp>$96: Sorbet::Private::Static::Void, <selfRestore>$97: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_21" [style="bold"];
    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_19" [style="tapered"];

    "bb::<Class:Main>#main_19" [
        color = black;
        label = "block[id=19, rubyBlockId=0](<block-pre-call-temp>$96: Sorbet::Private::Static::Void, <selfRestore>$97: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\l<statTemp>$93: T.untyped = Solve<<block-pre-call-temp>$96, each>\l<self>: T.class_of(Main) = <selfRestore>$97\l<cfgAlias>$153: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$154: Sorbet::Private::Static::Void = <cfgAlias>$153: T.class_of(A).each()\l<selfRestore>$155: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_19" -> "bb::<Class:Main>#main_22" [style="bold"];
    "bb::<Class:Main>#main_21" [
        color = black;
        label = "block[id=21, rubyBlockId=5](<self>: T.class_of(Main), <block-pre-call-temp>$96: Sorbet::Private::Static::Void, <selfRestore>$97: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<cfgAlias>$105: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$107: Integer(5) = 5\l<statTemp>$108: Integer(0) = 0\l<assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass] = <cfgAlias>$105: T.class_of(<Magic>).<expand-splat>(forTemp$6$5: NilClass, <statTemp>$107: Integer(5), <statTemp>$108: Integer(0))\l<statTemp>$112: Integer(0) = 0\l@a$110: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$112: Integer(0))\l<statTemp>$116: Integer(1) = 1\l@@b$114: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$116: Integer(1))\l<statTemp>$120: Integer(2) = 2\l$c$118: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$120: Integer(2))\l<statTemp>$123: Integer(3) = 3\ld$5: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$123: Integer(3))\l<cfgAlias>$126: T.class_of(E) = alias <C E>\l<statTemp>$129: Integer(4) = 4\l<statTemp>$127: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$129: Integer(4))\l<statTemp>$124: NilClass = <cfgAlias>$126: T.class_of(E).e=(<statTemp>$127: NilClass)\l<statTemp>$132: T.untyped = @a$110: NilClass.inspect()\l<statTemp>$130: NilClass = <self>: T.class_of(Main).puts(<statTemp>$132: T.untyped)\l<statTemp>$136: T.untyped = @@b$114: NilClass.inspect()\l<statTemp>$134: NilClass = <self>: T.class_of(Main).puts(<statTemp>$136: T.untyped)\l<statTemp>$140: T.untyped = $c$118: NilClass.inspect()\l<statTemp>$138: NilClass = <self>: T.class_of(Main).puts(<statTemp>$140: T.untyped)\l<statTemp>$144: T.untyped = d$5: NilClass.inspect()\l<statTemp>$142: NilClass = <self>: T.class_of(Main).puts(<statTemp>$144: T.untyped)\l<cfgAlias>$150: T.class_of(E) = alias <C E>\l<statTemp>$148: T.untyped = <cfgAlias>$150: T.class_of(E).e()\l<statTemp>$147: T.untyped = <statTemp>$148: T.untyped.inspect()\l<blockReturnTemp>$100: NilClass = <self>: T.class_of(Main).puts(<statTemp>$147: T.untyped)\l<blockReturnTemp>$151: T.noreturn = blockreturn<each> <blockReturnTemp>$100: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_21" -> "bb::<Class:Main>#main_18" [style="bold"];
    "bb::<Class:Main>#main_22" [
        color = black;
        label = "block[id=22, rubyBlockId=6](<self>: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped, <block-pre-call-temp>$154: Sorbet::Private::Static::Void, <selfRestore>$155: T.class_of(Main))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_22" -> "bb::<Class:Main>#main_25" [style="bold"];
    "bb::<Class:Main>#main_22" -> "bb::<Class:Main>#main_23" [style="tapered"];

    "bb::<Class:Main>#main_23" [
        color = black;
        label = "block[id=23, rubyBlockId=0](<block-pre-call-temp>$154: Sorbet::Private::Static::Void, <selfRestore>$155: T.class_of(Main))\l<returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$154, each>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_23" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_25" [
        color = black;
        label = "block[id=25, rubyBlockId=6](<self>: T.class_of(Main), @a$110: T.untyped, @@b$114: T.untyped, $c$118: T.untyped, <block-pre-call-temp>$154: Sorbet::Private::Static::Void, <selfRestore>$155: T.class_of(Main))\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$156: T.untyped = load_yield_params(each)\lforTemp$6: T.untyped = <blk>$156\l<cfgAlias>$162: T.class_of(<Magic>) = alias <C <Magic>>\l<assignTemp>$9$6: T.untyped = <cfgAlias>$162: T.class_of(<Magic>).<splat>(forTemp$6: T.untyped)\l<cfgAlias>$166: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$168: Integer(5) = 5\l<statTemp>$169: Integer(0) = 0\l<assignTemp>$10$6: T.untyped = <cfgAlias>$166: T.class_of(<Magic>).<expand-splat>(<assignTemp>$9$6: T.untyped, <statTemp>$168: Integer(5), <statTemp>$169: Integer(0))\l<statTemp>$172: Integer(0) = 0\l@a$110: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$172: Integer(0))\l<statTemp>$175: Integer(1) = 1\l@@b$114: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$175: Integer(1))\l<statTemp>$178: Integer(2) = 2\l$c$118: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$178: Integer(2))\l<statTemp>$181: Integer(3) = 3\ld$6: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$181: Integer(3))\l<cfgAlias>$184: T.class_of(E) = alias <C E>\l<statTemp>$187: Integer(4) = 4\l<statTemp>$185: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$187: Integer(4))\l<statTemp>$182: T.untyped = <cfgAlias>$184: T.class_of(E).e=(<statTemp>$185: T.untyped)\l<statTemp>$190: T.untyped = @a$110: T.untyped.inspect()\l<statTemp>$188: NilClass = <self>: T.class_of(Main).puts(<statTemp>$190: T.untyped)\l<statTemp>$194: T.untyped = @@b$114: T.untyped.inspect()\l<statTemp>$192: NilClass = <self>: T.class_of(Main).puts(<statTemp>$194: T.untyped)\l<statTemp>$198: T.untyped = $c$118: T.untyped.inspect()\l<statTemp>$196: NilClass = <self>: T.class_of(Main).puts(<statTemp>$198: T.untyped)\l<statTemp>$202: T.untyped = d$6: T.untyped.inspect()\l<statTemp>$200: NilClass = <self>: T.class_of(Main).puts(<statTemp>$202: T.untyped)\l<cfgAlias>$208: T.class_of(E) = alias <C E>\l<statTemp>$206: T.untyped = <cfgAlias>$208: T.class_of(E).e()\l<statTemp>$205: T.untyped = <statTemp>$206: T.untyped.inspect()\l<blockReturnTemp>$158: NilClass = <self>: T.class_of(Main).puts(<statTemp>$205: T.untyped)\l<blockReturnTemp>$209: T.noreturn = blockreturn<each> <blockReturnTemp>$158: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_25" -> "bb::<Class:Main>#main_22" [style="bold"];
}

subgraph "cluster_::<Class:Main>#<static-init>" {
    label = "::<Class:Main>#<static-init>";
    color = blue;
    "bb::<Class:Main>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Main>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Main>#<static-init>_0" [
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Main) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Main>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Main>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:main) = :main\l<statTemp>$7: Symbol(:normal) = :normal\l<returnMethodTemp>$2: Symbol(:main) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(Main), <statTemp>$6: Symbol(:main), <statTemp>$7: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:main)\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_0" -> "bb::<Class:Main>#<static-init>_1" [style="bold"];
    "bb::<Class:Main>#<static-init>_1" [
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_1" -> "bb::<Class:Main>#<static-init>_1" [style="bold"];
}

}

